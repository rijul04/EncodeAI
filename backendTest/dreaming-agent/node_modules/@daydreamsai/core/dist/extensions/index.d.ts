import { g as Extension, A as AnyContext, m as Context } from '../types-s9XV-UEy.js';
import { z } from 'zod';
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import 'ai';

declare const cli: Extension<AnyContext, {
    cli: Context<any, z.ZodObject<{
        user: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        user: string;
    }, {
        user: string;
    }>, any>;
}>;

/**
 * Creates and connects an MCP client to a server
 * @param options Configuration options for the MCP client
 * @returns Connected MCP client instance
 */
declare function createMcpClient(options: {
    clientInfo?: {
        name: string;
        version: string;
    };
    transport: {
        type: "stdio" | "sse";
        command?: string;
        args?: string[];
        serverUrl?: string;
        sseEndpoint?: string;
        messageEndpoint?: string;
    };
    capabilities?: {
        prompts?: Record<string, unknown>;
        resources?: Record<string, unknown>;
        tools?: Record<string, unknown>;
    };
}): Promise<Client<{
    method: string;
    params?: {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
            progressToken?: string | number | undefined;
        } | undefined;
    } | undefined;
}, {
    method: string;
    params?: {
        [x: string]: unknown;
        _meta?: {
            [x: string]: unknown;
        } | undefined;
    } | undefined;
}, {
    [x: string]: unknown;
    _meta?: {
        [x: string]: unknown;
    } | undefined;
}>>;

interface McpServerConfig {
    id: string;
    name: string;
    transport: {
        type: "stdio" | "sse";
        command?: string;
        args?: string[];
        serverUrl?: string;
        sseEndpoint?: string;
        messageEndpoint?: string;
    };
    capabilities?: {
        prompts?: Record<string, unknown>;
        resources?: Record<string, unknown>;
        tools?: Record<string, unknown>;
    };
}
/**
 * Creates an extension that connects to one or more MCP servers
 * and exposes their capabilities as actions within the agent system.
 *
 * @param servers Configuration for one or more MCP servers to connect to
 * @returns An extension that can be added to the agent's extensions list
 */
declare function createMcpExtension(servers: McpServerConfig[]): Extension;

export { cli, createMcpClient, createMcpExtension };
