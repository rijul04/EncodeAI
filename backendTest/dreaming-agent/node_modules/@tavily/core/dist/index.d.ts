type TavilySearchFuncton = (query: string, options: TavilySearchOptions) => Promise<TavilySearchResponse>;
type TavilyQNASearchFuncton = (query: string, options: TavilySearchOptions) => Promise<string>;
type TavilyContextSearchFuncton = (query: string, options: TavilySearchOptions) => Promise<string>;
type TavilyExtractFunction = (urls: Array<string>, options: TavilyExtractOptions) => Promise<TavilyExtractResponse>;
type TavilyClient = {
    search: TavilySearchFuncton;
    searchQNA: TavilyQNASearchFuncton;
    searchContext: TavilyContextSearchFuncton;
    extract: TavilyExtractFunction;
};
type TavilyProxyOptions = {
    http?: string;
    https?: string;
};
type TavilyClientOptions = {
    apiKey?: string;
    proxies?: TavilyProxyOptions;
};
type TavilySearchOptions = {
    searchDepth?: "basic" | "advanced";
    topic?: "general" | "news" | "finance";
    days?: number;
    maxResults?: number;
    includeImages?: boolean;
    includeImageDescriptions?: boolean;
    includeAnswer?: boolean;
    includeRawContent?: boolean;
    includeDomains?: undefined | Array<string>;
    excludeDomains?: undefined | Array<string>;
    maxTokens?: undefined | number;
    timeRange?: "year" | "month" | "week" | "day" | "y" | "m" | "w" | "d";
    chunksPerSource?: undefined | number;
    timeout?: number;
    [key: string]: any;
};
type TavilyImage = {
    url: string;
    description?: string;
};
type TavilySearchResult = {
    title: string;
    url: string;
    content: string;
    rawContent?: string;
    score: number;
    publishedDate: string;
};
type TavilySearchResponse = {
    answer?: string;
    query: string;
    responseTime: number;
    images: Array<TavilyImage>;
    results: Array<TavilySearchResult>;
};
type TavilyExtractOptions = {
    includeImages?: boolean;
    extractDepth?: "basic" | "advanced";
    timeout?: number;
    [key: string]: any;
};
type TavilyExtractResult = {
    url: string;
    rawContent: string;
    images?: Array<string>;
};
type TavilyExtractFailedResult = {
    url: string;
    error: string;
};
type TavilyExtractResponse = {
    results: Array<TavilyExtractResult>;
    failedResults: Array<TavilyExtractFailedResult>;
    responseTime: number;
};

declare function tavily(options?: TavilyClientOptions): TavilyClient;

export { type TavilyClient, type TavilyClientOptions, type TavilyContextSearchFuncton, type TavilyExtractFunction, type TavilyExtractOptions, type TavilyExtractResponse, type TavilyProxyOptions, type TavilyQNASearchFuncton, type TavilySearchFuncton, type TavilySearchOptions, type TavilySearchResponse, tavily };
